#!/bin/sh
# make sure new versions of bash >= 3.2.9-11 on Cygwin ignore carriage returns
set -o | grep igncr >/dev/null && set -o igncr # comment required here
#set -x
# test auto-submit
# start with /bin/sh but look for ksh or bash if we appear to be running
# a true Bourne shell
[ "$RANDOM" != "$RANDOM" ]
if test $? -ne 0 ; then
    for i in /bin/bash /usr/bin/bash /bin/ksh /usr/bin/ksh; do
        [ -x "$i" ] && exec "$i" "$0" "$@"
    done
fi

# This assumes this lives in tools/wls/infra
cd `dirname $0`
INFRA_ROOT=`pwd`

cd $INFRA_ROOT/../../..
tmpdir=`pwd`
DEV_ROOT=${tmpdir:?}
echo "$DEV_ROOT" | grep release > /dev/null
if [ $? -eq 0 ]; then
   SRC="release/`basename $DEV_ROOT`"
else
   SRC=`basename $DEV_ROOT`
fi
unset tmpdir

OS=`uname`

if [ "`echo $OS | grep -i CYGWIN`" -a -n "$SHLVL" ]; then
    INFRA_ROOT=`cygpath -m $INFRA_ROOT`
    DEV_ROOT=`cygpath -m $DEV_ROOT`
fi
export INFRA_ROOT
export DEV_ROOT
export SRC
if [ -n "$JAVA_HOME" ]; then
    export PATH=$JAVA_HOME/bin:$PATH
else
    echo "ERROR: JAVA_HOME not set" 1>&2
    exit 1
fi
if [ -z "$P4USER" ]; then
    echo "ERROR: P4USER not set!"
    echo "       if you have p4 account on WLS p4, set RQUSER to the value of your p4 username;"
    exit 1
fi
if [ -z "$ENQUEUE_AS" ]; then
  ENQUEUE_AS=$P4USER
fi

# assert that env vars are set
: ${DEV_ROOT:?} ${SRC:?}

echo $0 | grep new$ >/dev/null
if [ $? -eq 0 ]; then
    NEW=new
else
    NEW=
fi

defined_targets=`$INFRA_ROOT/test/remotetestprops$NEW.pl list $INFRA_ROOT/test/remotetestprops$NEW.env | sed "s/,/|/g"`

usage() {
    (
	cat <<EOF
Usage: enqueue$NEW [-d description] [-c changelist] [-s syncto] [-m mailto] [-j jvm] [-k jvm] [-f functional test name] [-o OS] [-w hostname] [-i source_branch] [-S] [-p] [-a] [-h] [$defined_targets]

 Platform Remote Queue Syntax  coherence equivalent
 ----------------------------  -------------
 -Ddescription="foo bar"       -d "foo bar"
 -Dsyncto=123456               -s 123456
 -Dsubmit=true                 -a
 -Dmailto=ce-cc-pass_ww@oracle.com     -m ce-cc-pass_ww@oracle.com
 -Dpublish=true                -p
 -Dmetatime=xxx                -t xxx
 -OS=xxx                       -o xxx # Default value is Linux, allowed value is Win
 -DHOST=adc12345678            -w slc04yqe
 -Dintegfrom=main              -i main
 -f xxx : execute xx functional test, only used in remote.function
 -S     : enable -Dtest.security.enabled=true in maven test command
 -Dparallel=true:              -P {true|false}  #If set to true, run jobs in parallel mode. Default to true for remote.full only.
 -Dstage_name=stage1,stage2... -g stage1,stage2...

Refer http://home.us.oracle.com/internal/coherence/main/remote.html for detail
EOF

    ) 1>&2
    exit 1
}

# Platform Remote Queue Syntax	coherence equivalent
# ----------------------------	-------------
# -Ddescription="foo bar"	-d "foo bar"
# -Dsyncto=123456		-s 123456
# -Dsubmit=true			-a
# -Dmailto=ce-cc-pass_ww@oracle.com	-m ce-cc-pass_ww@oracle.com
# -Dpublish=true		-p
# -Dmetatime=xxx                -t xxx
# -Dlabel=jenkinslabel          -l jenkinslabel
# -OS=xxx			-o xxx # Default value is Linux, allowed value is Win
# -DHOST=adc12345678            -w slc04yqe
# -Dintegfrom=main              -i main
# New feature in coherence RQ
# -f xxx : execute xx functional test, only used in remote.function
# -S     : enable -Dtest.security.enabled=true in maven test command
# -Dparallel=true:           -P {true|false} If set to true, run jobs in parallel. Default to true for remote.full only.
# -Dstage_name=stage1,stage2... -g stage1,stage2...
description=
syncto=
publish=
mailto=
changelist=
jv=
jv4test=
label=
justzip=
submit=
rtargets=
status=
functest=
security=
os=
where=
integfrom=
parallel=
stage_name=

while getopts :d:s:m:u:c:l:j:k:l:t:f:o:i:w::P:g:pzvhaS arg
do
    case "$arg" in
	d)  description="${OPTARG:?}" ;;
	s)  syncto="${OPTARG:?}" ;;
	m)  mailto="${OPTARG:?}" ;;
	c)  changelist="${OPTARG:?}" ;;
	j)  jv="${OPTARG:?}" ;;
	k)  jv4test="${OPTARG:?}" ;;
	l)  label="${OPTARG:?}" ;;
	t)  metatime="${OPTARG:?}" ;;
	f)  functest="${OPTARG:?}" ;;
	z)  justzip=true ;;
	+z)  justzip= ;;
	o)  os="${OPTARG:?}" ;;
	p)  publish=true ;;
	+p) publish=true ;;
	a)  submit=true ;;
	+a) submit= ;;
	v)  status=true ;;
	+v) status= ;;
	h)  usage ;;
	w)  where="${OPTARG:?}" ;;
	i)  integfrom="${OPTARG:?}" ;;
	S)  security=true ;;
	+S) security= ;;
  P)  parallel="${OPTARG:?}" ;;
  g)  stage_name="${OPTARG:?}" ;;
	"?")
	    echo "ERROR: unknown option \"$OPTARG\"" 1>&2
	    echo "" 1>&2
	    usage ;;
    esac
done
if [ "$OPTIND" -gt 1 ]
then
  let OPTIND=OPTIND-1
  shift $OPTIND
fi

if [ "$#" -gt 1 ]
then
    echo "INFO: only none or one argument allowed." 1>&2
    usage
fi

if [ "$#" -eq 1 ]
then
    #remote_targets=`echo $1 |sed 's/[[:space:]]*//g'`
    remote_targets=`echo $1`
    echo "$defined_targets" | grep "$remote_targets" > /dev/null
    if [ $? -ne 0 ]; then
	    echo "FATAL: unknown remote target $remote_targets" 1>&2
	    usage
    else
        remotetest=$remote_targets
    fi
else
    remotetest="remote.full"
fi

if [ "$remotetest" = "remote.installer" -a "$submit" = "true" ];then
     echo "FATAL: Can't use remote.shiphome to auto-submit change" 1>&2
     exit 8
fi

if [ "$remotetest" = "remote.function" ]; then
   if [ -z "$functest" ]; then
       echo "Error: functional test not sepcified, can't submit remote.function job! Please specify with -f option." 1>&2
       exit 5
   fi
   functest_list=`ls $DEV_ROOT/prj/test/functional`
   echo "$functest_list" | sed 's/$/:$/g' | grep "${functest}:" > /dev/null
   if [ $? -ne 0 ]; then
      echo "Error: functional test isn't found! Please check spelling or you need to sync the top folder under $DEV_ROOT/prj/test/functional" 1>&2
      exit 4
   fi
fi
if [ "$remotetest" = "remote.distribution" ]; then
   if [ -z "$functest" ]; then
       echo "Error: functional test not sepcified, can't submit remote.distribution job! Please specify with -f option." 1>&2
       exit 5
   fi
   functest_list=`ls $DEV_ROOT/prj/test/distribution`
   echo "$functest_list" | sed 's/$/:$/g' | grep "${functest}:" > /dev/null
   if [ $? -ne 0 ]; then
      echo "Error: functional test isn't found! Please check spelling or you need to sync the top folder under $DEV_ROOT/prj/test/distribution" 1>&2
      exit 4
   fi
fi

if [ "$remotetest" = "remote.compatibility" ]; then
   if [ -z "$functest" ]; then
       echo "Error: functional test not sepcified, can't submit remote.compatibility job! Please specify with -f option." 1>&2
       exit 5
   fi
   functest_list=`ls $DEV_ROOT/prj/test/compatibility`
   echo "$functest_list" | sed 's/$/:$/g' | grep "${functest}:" > /dev/null
   if [ $? -ne 0 ]; then
      echo "Error: functional test isn't found! Please check spelling or you need to sync the top folder under $DEV_ROOT/prj/test/compatibility" 1>&2
      exit 4
   fi
fi

if [ "$submit" = "true" -a -n "$rtargets" ]; then
    echo "FATAL: multiple targets with auto-commit on is not allowed, you can do an auto-commit with a single target!" 1>&2
    exit 1
fi

if [ "$submit" = "true" -o ! -z "$integfrom" ]; then
    if [ "$changelist" = "none" ]; then
        echo "FATAL: auto-submit (-a) or auto-integ (-i) but there are no changes to submit or integ" 1>&2
        exit 1
    elif [ "$changelist" = "default" -o -z "$changelist" ]; then
        echo "FATAL: you must specify a change number (-c #) when auto-submitting (-a) or auto-integing (-i)" 1>&2
        exit 1
    fi
fi

#  branch allow user omitting release in integfrom branch name
if [ -n "$integfrom" ]; then
   echo "$integfrom" | grep "release/" > /dev/null
   if [ $? -eq 0 ]; then
      echo "\"release/\" in branch name can be omitted when you submit job"
   elif [ "$integfrom" != "main" ]; then
      integfrom="release/$integfrom"
   fi
   echo "integ change $changelist from branch $integfrom"
fi
# integfrom branch should be different than current
if [ -n "$integfrom" -a "$integfrom" = "$SRC" ]; then
   echo "FATAL: integfrom branch shouldn't be same as current branch $SRC"
   exit 9
fi

if [ "$remotetest" = "remote.full" -a "$parallel" != "false" ];then
    echo "INFO: Going to run $remotetest in parallel by default." 1>&2
    parallel=true
fi

STAMP="`date -u +%Y%m%d%H%M%S`"
JOBID="job.9.$STAMP.$RANDOM"

$INFRA_ROOT/zipopenedfiles "$JOBID.zip" "$changelist" "$description"

if [ $? -ne 0 ]; then
    echo "ERROR: failed to zip opened files for the job!" 1>&2
    exit 1
fi

if [ "$submit" = "true" ]; then
    if [ -z "$integfrom" -a "`egrep ' - (add|delete|branch) ' < p4opened.files | wc -l`" -eq 0 ]; then
	if [ "`awk -F# '{print $1}' < p4opened.files | p4 -x- diff -Od | wc -l`" -eq 0 ]; then
	    echo "FATAL: auto-submit (-a) but there are no changes to submit" 1>&2
	    exit 1
    	fi
    fi
fi

grep /wls/infra/test/remotetest p4opened.files >/dev/null
if [ $? -eq 0 ]; then
    echo "FATAL: remotetest* scripts found!  You can not use the remote queue to" 1>&2
    echo "FATAL: test changes to the remote queue scripts!  Use the remotetest*new*" 1>&2
    echo "FATAL: scripts, see http://home.us.oracle.com/internal/$SRC/remote_internal.html#add" 1>&2
    exit 1
fi

if [ -z "$integfrom" ]; then
  echo "Checking copyright headers..."
  NEW_SRC="`echo $SRC |sed -e 's|\/|\\\/|g'`"
  sed -e '/ - delete /d' -e '/ - move\/delete /d' -e "s/\/\/dev\/$NEW_SRC\/\(.*\)#.*/\1/g" p4opened.files > p4openedfiles_copyright
  xargs -L1 $DEV_ROOT/prj/etc/copyright-check-enqueue.sh < p4openedfiles_copyright
  if [ $? -ne 0 ]; then
    echo "ERROR: Copyright check failed!" 1>&2
    exit 1
  fi
rm p4openedfiles_copyright
fi

zip -q -u -m "$JOBID.zip" p4opened.files p4changes.txt p4branched.files

if [ $? -ne 0 ]; then
    echo "ERROR: failed to zip the changes for the job!" 1>&2
    exit 1
fi

# enqueue -z = zip.opened.files
if [ "$justzip" = "true" ]; then
    rm -f "$JOBID"
    echo "INFO: leaving zip file @ `pwd`/$JOBID.zip" 1>&2
    exit
fi

if [ -n "$where" ]; then
    # assume -w host always is more important than the OS (i.e. ignore -o os if -w host is used)
    chars="#,HOST=${where},"
elif [ -n "$label" ]; then
    # assume -Dlabel= always is more important than the OS (i.e. ignore -o os if -Dlabel= is used)
    # label *must* be quoted for stuff like (linux&&rq) to work in infra/test/getcommandline.sh
    chars="#,LABEL=$label,"
else
    chars="#,OS=${os:-Linux},"
fi

cat <<EOF >$JOBID
${chars}
infra/test/remotetest$NEW.sh ${remotetest:-remote.full} ${ENQUEUE_AS} JV=${jv} JV4TEST=${jv4test} SYNCTO=${syncto} ${integfrom:+ INTEGFROM=}${integfrom} PUBLISH=${publish} SUBMIT=${submit} SECURITY=${security} MAILTO=${mailto} METATIME=${metatime} FUNCTEST=${functest} PARALLEL=${parallel} STAGE_NAME=${stage_name}
EOF

#set -e
if [ "$OS" = "Windows_NT" ]; then
    CURL=$INFRA_ROOT/curl.exe
else
    CURL=curl
fi

$CURL --noproxy '*' --retry 3 --retry-delay 10 --form "zip=@$JOBID.zip" --form "job=@$JOBID" http://home.us.oracle.com/internal/coherence/$SRC/enqueue.jsp?id=$JOBID  > enqueue.log 2>&1

# remove the local job files
rm -rf "$JOBID" "$JOBID.zip" p4opened.files p4branched.files p4changes.txt p4openedfiles_save

grep "$JOBID successfully enqueued!" enqueue.log > /dev/null
if [ $? -eq 0 ]; then
  echo "INFO: $JOBID enqueued successfully"
  rm enqueue.log
else
  echo "ERROR: $JOBID failed to enqueue to central queue, please check $DEV_ROOT/enqueue.log for detail info, if can't solve it, please contact infra-rq_cn_grp@oracle.com team for help!"
  exit 7
fi
get=""
if [ -n "`which wget`" ]; then
    get="wget --no-proxy --quiet -O-"
elif [ -n "`which curl`" ]; then
    get="curl --silent --noproxy '*'"
elif [ -n "`which web`" ]; then
    get="web get"
fi

if [ -n "$get" -a "$status" = "true" ]; then
    $get "http://home.us.oracle.com/internal/coherence/$SRC/remote.jsp?format=text"
fi

JOB_URL=http://home.us.oracle.com/internal/coherence/$SRC/job.jsp?id=$JOBID

if [ $OS == "Darwin" ] ; then open $JOB_URL ; fi

cat <<EOF
Your job url is: $JOB_URL
For detailed queuing/machine information...
http://home.us.oracle.com/internal/coherence/$SRC/remote.jsp
EOF
