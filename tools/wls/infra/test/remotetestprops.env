# General Explanation
# -------------------
#
# This file is read by both Remote Queue infrastructure scripts and
# Cruisecontrol infrastructure scripts.  It provides a single shared
# definition of tests.


# CC uses only the "singleton" tests (i.e. CC does nothing with those
# tests in this file that include other tests from this file).
# Corrollary: the CC parser (wls/infra/test/cc_get_rq_props.pl) will
# choke on the string "UNKNOWN" which frequently occurs in compound
# tests but should never appear in singleton tests, because CC sets DRT
# counters for singleton tests).


# For CC, the following files are involved in reading *props.env:
#
# //depot/dev/${SRC}/wls/infra/test/cc_get_rq_props.pl
# //depot/dev/${SRC}/wls/infra/test/remotetestprops.env
# //depot/cruisecontrol/${SRC}/common/config/cc_get_rq_props.xml
# //depot/cruisecontrol/src_wlp/hosts/${host.name}/config/build.xml
# //depot/cruisecontrol/src_wlp/hosts/${host.name}/config/build.properties
#
# Also in CC there are test targets in cc_get_rq_props.xml for running
# cc_get_rq_props.pl outside of CC.  This confirms the read of
# *props.env and helps debug the usage of the somewhat terse and
# touchy ant 'exec' task.


# For the Remote Queue, the following files are used to read *props.env:
#
# //depot/dev/${SRC}/wls/infra/test/remotetest.sh
# //depot/dev/${SRC}/wls/infra/test/remotetestrun.sh
# //depot/dev/${SRC}/wls/infra/test/remotetestprops.pl
# //depot/dev/${SRC}/wls/infra/test/remotetestprops.env
#
# Also in the RQ the usual *new.* options are available for testing
# the above, i.e. *runnew.sh, *propsnew.pl and *propsnew.env.  See the
# Remote Test Internal Docs page for details.


# Usage Notes for this file *props.env
# -------------------------------------
#
# 1.  If you add or modify this file you must also re-generate the
#     documentation file,
#
#         //depot/dev/$SRC/wls/infra/web/remote.html
#
#     Here is an example of how you currently do that:
#
#         p4 edit ../web/remote.html
#         perl remotetestprops.pl doc remotetestprops.env > ../web/remote.html
#
# 2.  To generate the expanded table that displays the CC hosts'
#     configs and properties (in addition to the RQ table), say this:
#
#         perl remotetestprops.pl doc-cc remotetestprops.env > remote-2-cc.html
#
# 3.  All tests that are part of compound tests must have singleton
#     definitions somewhere else in this file.  The perl that parses
#     this file will die if it cannot find such a singleton test
#     definition (hopefully printing an informative exit message).
# 
# 4.  To specify "no p4clean done, assumed done in target", set the
#     clean value to none or null.

# Explanation of fields / properties
# ----------------------------------
#
#     .syncto  - counter set by CC and sync'd to by the RQ
#     .clean   - the name of the clean target used by both CC and RQ
#     .build   - the target CC builds before running any DRT
#     .infomsg - a notiice written to the RQ log file "test.out"
#     .test    - test definition, dir:name

# remote.standard
#remote.standard.syncto=Coh-Java-main-latest
#remote.standard.clean=clean
#remote.standard.build=build,dist
#remote.standard.infomsg="#Coh-Java-main-latest is change ${SYNCTO}"
#remote.standard.test="prj/tests:test.standard"
#remote.standard.contact=

# remote.full
remote.full.syncto=change
remote.full.clean=clean
remote.full.build=package
remote.full.infomsg="#head is change ${SYNCTO}"
remote.full.test="prj:install"
remote.full.stages="stage1 stage2 stage3 stage4 stage5 stage6 stage7 stage8 stage9 stage10 stage11 stage12 stage13"
remote.full.contact=

# remote.function
remote.function.syncto=change
remote.function.clean=clean
remote.function.build=build,dist
remote.function.infomsg="#head is change ${SYNCTO}"
remote.function.test=test/functional:verify
remote.function.contact=

# remote.distribution
remote.distribution.syncto=change
remote.distribution.clean=clean
remote.distribution.build=build,dist
remote.distribution.infomsg="#head is change ${SYNCTO}"
remote.distribution.test=test/distribution:verify
remote.distribution.contact=

# remote.compatibility
remote.compatibility.syncto=change
remote.compatibility.clean=clean
remote.compatibility.build=build,dist
remote.compatibility.infomsg="#head is change ${SYNCTO}"
remote.compatibility.test=test/compatibility:verify
remote.compatibility.contact=

# remote.installer
remote.installer.syncto=change
remote.installer.clean=clean
remote.installer.build=build_installer
remote.installer.infomsg="#head is change ${SYNCTO}"
remote.installer.test=none:none
remote.installer.contact=

# remote.standard.wls
#remote.standard.wls.syncto=change
#remote.standard.wls.clean=clean
#remote.standard.wls.build=build,dist
#remote.standard.wls.infomsg="#head is change ${SYNCTO}"
#remote.standard.wls.test="remote.standard"
#remote.standard.wls.contact=

# remote.full.wls
#remote.full.wls.syncto=change
#remote.full.wls.clean=clean
#remote.full.wls.build=build,dist
#remote.full.wls.infomsg="#head is change ${SYNCTO}"
#remote.full.wls.test="remote.full"
#remote.full.wls.contact=

# remote.customized
#remote.customized.syncto=Coh-Java-main-latest
#remote.customized.clean=clean
#remote.customized.build=build,dist
#remote.customized.infomsg="Coh-Java-main-latest is change ${SYNCTO}"
#remote.customized.test="prj/tests:customized"
#remote.customized.contact=

